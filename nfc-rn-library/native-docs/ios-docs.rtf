{\rtf1\ansi\ansicpg1252\cocoartf2822
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;}
{\*\expandedcolortbl;;}
\paperw11900\paperh16840\margl1440\margr1440\vieww11520\viewh8400\viewkind0
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\f0\fs24 \cf0 ---\
description: Udentify iOS SDK NFC ID Verification\
---\
\
# NFC ID Verification\
\
## Development Environment Setup\
\
#### Step 1: Add required frameworks to the project\
\
([Download Here](../ios-sdk-resources#nfc-sdk)) In Xcode, drag and drop the following dependencies to your project's `Frameworks` folder.\
\
* [<mark style="color:blue;">**UdentifyCommons.xcframework**</mark>](../ios-sdk-resources#nfc-sdk)\
* [<mark style="color:blue;">**UdentifyNFC.xcframework**</mark>](../ios-sdk-resources#nfc-sdk)\
\
```\
<Project>\
\uc0\u9492 \u9472 \u9472 \u9472 Frameworks   \
    \uc0\u9492 \u9472 \u9472 \u9472 UdentifyCommons.xcframework\
    \uc0\u9492 \u9472 \u9472 \u9472 UdentifyNFC.xcframework\
```\
\
\{% hint style="warning" %\}\
You can use the following link to integrate our SDKs into your iOS project via [Swift Package Manager (SPM)](https://docs.fraud.com/udentify/udentify-api-and-sdk/ios-sdk/ios-sdk-resources#swift-package-manager)\
\{% endhint %\}\
\
#### Step 2: Configure project settings\
\
In Xcode, click the project file and go to the **Targets** -> **General** section.\
\
#### Step 3: Embed and sign the framework\
\
In the **Frameworks, Libraries, and Embedded Content** section, select `Embed & Sign` for both **"UdentifyCommons.xcframework"** and **"UdentifyNFC.xcframework"** files.\
\
#### Step 4: Modify build settings\
\
In the **Targets** section again, enter **Build Settings** and change the following settings:\
\
* Set **Enable Bitcode** to `No`.\
* Set **Skip Install** to `No`.\
\
#### Step 5: Add Near Field Communication Tag Reading capability\
\
In the **Targets** -> **Signing & Capabilities** pane, press the **Capability** insert button and add the "Near Field Communication Tag Reading" feature.\
\
#### Step 6: Update Info.plist file\
\
Add the following to the `Info.plist` file:\
\
```xml\
<key>NFCReaderUsageDescription</key>\
<string>This app uses NFC in order to scan passports</string>\
<key>com.apple.developer.nfc.readersession.iso7816.select-identifiers</key>\
<array>\
   <string>A0000002471001</string>\
</array>\
```\
\
\{% hint style="info" %\}\
Three mandatory credentials are required to access the NFC chip:\
\
**1.** Document No\
\
**2.** Date of birth (in the format `YYMMDD`)\
\
**3.** Date of expiration (in the format `YYMMDD`)\
\
You can enter them manually or read them using the MRZ Reader.\
\{% endhint %\}\
\
\{% hint style="danger" %\}\
Warning : Incorrect input of the Document No., Date of Birth, and Date of Expiration could lead to the NFC Chip on the ID being blocked.\
\{% endhint %\}\
\
## NFC Chip Reading\
\
#### Step 1: Import the UdentifyNFC Library\
\
To read the NFC Chip, first, import the UdentifyNFC library:\
\
```swift\
import UdentifyNFC\
```\
\
#### Step 2: Initialise the NFCReader Entity\
\
First, declare the NFCReader as a class property to maintain its reference throughout the lifecycle of your class:\
\
```swift\
class YourViewController: UIViewController \{\
\
    private var nfcReader: NFCReader?\
    \
    // ... other properties\
\}\
```\
\
Then, initialize the `NFCReader` with the MRZ (Machine-Readable Zone) information. The `dateOfBirth` and `expiryDate` must be in the `yyMMdd` format. The `serverURL` parameter indicates the address of the UdentifyRest server. The `transactionID` parameter will be queried from the `serverURL`. The `requestTimeout` parameter indicates the timeout time for any request to the server:\
\
```swift\
// Initialize the NFCReader and store it in the class property\
nfcReader = NFCReader(documentNumber: passportNumber.text!,\
                     dateOfBirth: dateOfBirth.text!,\
                     expiryDate: expiryDate.text!,\
                     transactionID: "TX_ID",\
                     serverURL: "SERVER_URL",\
                     requestTimeout: 10,\
                     isActiveAuthenticationEnabled: true,\
                     isPassiveAuthenticationEnabled: true,\
                     logLevel: .warning\
)\
```\
\
Conform to the `NFCReaderSessionDelegate` protocol to handle NFC session events:\
\
```swift\
extension YourViewController: NFCReaderSessionDelegate \{\
    \
    func nfcReaderSessionDidBegin() \{\
        print("NFCReader session started.")\
        \
        DispatchQueue.main.async \{\
            self.scanNfcButton.isEnabled = false\
        \}\
    \}\
    \
    func nfcReaderSessionDidEnd(with message: String?) \{\
        print("NFCReader session ended. \\(message ?? "")")\
        DispatchQueue.main.async \{\
            self.scanNfcButton.isEnabled = true\
        \}\
    \}\
    \
    \
\}\
```\
\
Set delegate for the `nfcReader` object to handle NFC session events:\
\
```swift\
self.nfcReader?.sessionDelegate = self\
```\
\
> **Important**: The NFCReader must be retained as a class property to prevent it from being deallocated during NFC operations. Do not create it as a local variable.\
\
\{% hint style="danger" %\}\
**Warning**: If the credentials are incorrectly entered, the chip on the ID/Passport may be blocked. We strongly recommend double-checking the information before proceeding.\
\{% endhint %\}\
\
#### Step 3: Read the NFC Chip\
\
The `read()` method of the `nfcReader` object launches the NFC window, and the information is read when the Chip is moved closer to the iPhone NFC Antenna. This method returns passport/ID information, error, and progress.\
\
```swift\
nfcReader.read() \{ (passport, error, progress) in\
    if let passport = passport \{\
        self.nfcReader = nil\
        let image = passport.image\
        let firstName = passport.firstName\
        let lastName = passport.lastName\
  \
        // If Passive Authentication and \
        // Active Authentication information is required\
        switch passport.passedPA \{\
        case .disabled:\
            print("PA is disabled.")\
        case .true:\
            print("Passed PA.")\
        case .false:\
            print("PA failed.")\
        case .notSupported:\
            print("PA not supported.")\
        \}\
  \
        switch passport.passedAA \{\
        case .disabled:\
            print("AA is disabled.")\
        case .true:\
            print("Passed AA.")\
        case .false:\
            print("AA failed.")\
        case .notSupported:\
            print("AA not supported.")\
        \}\
    \} else if let progress = progress \{\
        print("*********** \\(progress)% ***********")\
    \} else \{\
        print("Passport reading is failed!")\
        self.nfcReader = nil\
    \}\
\}\
```\
\
> **Important**: `nfcReader` object needs to be set to nil after reading the NFC Chip to prevent memory leaks and ensure that the NFC session is properly closed.\
\
#### Step 4: Cancelling NFC reading progress\
\
If you want to set a timeout for NFC reading progress and closing the NFC popup window accordingly, then you can use `cancelReading()` method of `nfcReader` object:\
\
```swift\
// Cancelling NFC Reading after 5 seconds\
DispatchQueue.main.asyncAfter(deadline: .now() + 5) \{\
    self.nfcReader!.cancelReading\{\
        Log.info("Cancelled automatically after 5 sec.")\
    \}\
\}\
```\
\
## NFC Antenna Locator\
\
**NFCLocator** helps guide the user when reading the NFC chip, such as informing them of where to place their NFC-enabled phone. Fraud.com maintains a database of NFC Antenna locations within smartphones, which is used to suggest the optimal position for the phone. The figure below illustrates the locations that a user may be directed to.\
\
<figure><img src="https://4079253175-files.gitbook.io/~/files/v0/b/gitbook-x-prod.appspot.com/o/spaces%2FZ7XsLn2oY4auFrbHIEk4%2Fuploads%2F3UxdD0autxc1R5Siy3NC%2Fimage.png?alt=media&#x26;token=d726d6f8-3f5e-4564-8d51-464a3fad93c9" alt=""><figcaption></figcaption></figure>\
\
**NFCLocator** usage below\
\
```swift\
import UIKit\
import UdentifyNFC\
\
/// A view controller that demonstrates how to use the `NFCLocator` to retrieve the NFC location.\
class NFCViewController: UIViewController \{\
    \
    /// The `NFCLocator` instance used to retrieve the NFC location from the server.\
    private var nfcLocator: NFCLocator?\
    \
    override func viewDidLoad() \{\
        super.viewDidLoad()\
        \
        // Initialize the NFCLocator with the server URL from AppData.\
        nfcLocator = NFCLocator(serverURL: AppData.serverURL)\
        \
        // Retrieve the NFC location from the server.\
        nfcLocator?.locateNFC \{ (location, error) in\
            \
            if let error = error \{\
                // Handle the error: print an error message and set a default value.\
                print("Couldn't retrieve NFC location: \\(error)")\
                AppData.nfcLocation = NFCLocation.unknown\
                return\
            \}\
            \
            // If the location is retrieved successfully, print the location and update your data.\
            if let location = location \{\
                print("NFC location: \\(location)")\
                AppData.nfcLocation = location\
            \}\
        \}\
    \}\
\}\
\
public enum NFCLocation: Int \{\
    case unknown = 0\
    case frontTop = 1\
    case frontCenter = 2\
    case frontBottom = 3\
    case rearTop = 4\
    case rearCenter = 5\
    case rearBottom = 6\
\}\
```\
\
## Error Codes\
\
```swift\
public enum TagError: Error \{\
    case ResponseError(String)\
    case InvalidResponse\
    case UnexpectedError(Error)\
    case NFCNotSupported\
    case NoConnectedTag\
    case D087Malformed\
    case InvalidResponseChecksum\
    case MissingMandatoryFields(String)\
    case CannotDecodeASN1Length\
    case InvalidASN1Value\
    case UnableToProtectAPDU\
    case UnableToUnprotectAPDU\
    case UnsupportedDataGroup\
    case DataGroupNotRead\
    case UnknownTag\
    case UnknownImageFormat\
    case NotImplemented\
    case PassiveAuthError(String)\
    case ActiveAuthenticationFailed(Error)\
    case UserCancelledNFCSession\
    case AppCancelledNFCSession\
    case NFCDataNotAvailable\
\}\
\
// Backend related errors\
public enum ServerError: Error \{\
    case InvalidResponse(String)\
    case UnexpectedError(Error)\
\}\
\
public enum NFCLocationError: Error \{\
    case ServerError(String)\
\}\
```\
\
## Localization\
\
The Udentify iOS SDK provides localisation support for NFC (Near Field Communication) reading processes. The following strings are used to display messages and directives to the user:\
\
```swift\
"nfc_reading_directive" = "Hold your iPhone near an NFC enabled passport.";\
"nfc_reading_message" = "Reading passport data...";\
"nfc_reading_progress_message" = "Reading passport data";\
"nfc_reading_authentication_message" = "Authenticating with chip...";\
"nfc_error_multiple_tags_message" = "Multiple Tags found. Please present only 1 tag.";\
"nfc_error_tag_invalid_message" = "Tag couldn't be read.";\
"nfc_error_connection_failed_message" = "NFC connection failed.";\
"nfc_error_reading_failed_message" = "Problem reading the eID/ePassport. Try again.";\
"nfc_error_bac_failed_message" = "BAC failed.";\
"nfc_session_cancelled_by_customer" = "NFC session timed out!";\
"nfc_error_tag_not_found_message" = "No NFC tag was detected.";\
```\
\
**nfc\\_reading\\_directive:** This string is used to prompt the user to hold their iPhone near an NFC enabled passport.\
\
**nfc\\_reading\\_message:** This string is used to display a message to the user that the passport is being read.\
\
**nfc\\_reading\\_progress\\_message:** This string is used to indicate that the process of reading the passport data is in progress.\
\
**nfc\\_reading\\_authentication\\_message:** This string is used to display a message to the user that the NFC chip is being authenticated.\
\
**nfc\\_error\\_multiple\\_tags\\_message:** This string is used to display an error message to the user if more than one NFC Chip is detected.\
\
**nfc\\_error\\_tag\\_invalid\\_message:** This string is used to display an error message to the user if the tag is invalid.\
\
**nfc\\_error\\_connection\\_failed\\_message:** This string is used to display an error message to the user if the NFC connection fails.\
\
**nfc\\_error\\_reading\\_failed\\_message:** This string is used to display an error message to the user if the eID or ePassport cannot be read.\
\
**nfc\\_error\\_bac\\_failed\\_message:** This string is used to display an error message to the user if the BAC (Basic Access Control) process fails.\
\
**nfc\\_session\\_cancelled\\_by\\_customer:** This string is used to display a message to the user that the session is timed out. This message is displayed after `cancelReading()` method is invoked.\
}