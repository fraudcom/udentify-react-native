// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 6.1 effective-5.10 (swiftlang-6.1.0.110.21 clang-1700.0.13.3)
// swift-module-flags: -target arm64-apple-ios13.0 -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -enable-experimental-feature DebugDescriptionMacro -enable-bare-slash-regex -module-name UdentifyFACE
// swift-module-flags-ignorable: -no-verify-emitted-module-interface -interface-compiler-version 6.1
import AVFoundation
import CoreImage
import CoreML
import DeveloperToolsSupport
import Foundation
import Lottie
import Swift
import SwiftUI
import UIKit
import UdentifyCommons
@_exported import UdentifyFACE
import Vision
import _Concurrency
import _StringProcessing
import _SwiftConcurrencyShims
public struct ListUser {
}
open class FaceIDResult {
  open var method: UdentifyFACE.MethodType?
  open var header: Swift.String?
  open var description: Swift.String
  open var error: UdentifyFACE.FaceError?
  open var verified: Swift.Bool
  open var matchScore: Swift.Double
  open var transactionID: Swift.String?
  open var userID: Swift.String?
  open var listNames: Swift.String?
  open var listIds: Swift.String?
  open var referencePhoto: UIKit.UIImage?
  open var registrationTransactionID: Swift.String?
  open var metadata: [Swift.String : UdentifyCommons.UdentifyAny?]?
  public init(method: UdentifyFACE.MethodType? = nil, header: Swift.String? = nil, description: Swift.String = "", error: UdentifyFACE.FaceError? = nil, verified: Swift.Bool = false, matchScore: Swift.Double = 0, transactionID: Swift.String? = nil, userID: Swift.String? = nil, listNames: Swift.String? = nil, listIds: Swift.String? = nil, referencePhoto: UIKit.UIImage? = nil, registrationTransactionID: Swift.String? = nil, metadata: [Swift.String : UdentifyCommons.UdentifyAny?]? = nil)
  @objc deinit
}
public enum FaceError : Swift.Error {
  case faceImageMissing
  case userIDMissing
  case methodTypeMissing
  case transactionIDMissing
  case serverURLMissing
  case cameraPermissionRequired
  case notConsistent
  case notAlive
  case notMatch
  case api(Swift.String)
  case other(any Swift.Error)
  case cameraPermissionDenied
  case initializationError(Swift.String)
  case photoCaptureError
  case invalidAssessmentResult
  case unknownGesture
  case listNameMissing
}
extension UdentifyFACE.FaceError : Foundation.LocalizedError {
  public var errorDescription: Swift.String? {
    get
  }
  public var causeDescription: Swift.String? {
    get
  }
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor @preconcurrency public class BaseController : UIKit.UIViewController {
  @_Concurrency.MainActor @preconcurrency public func dismissOrPopViewController(completion: (() -> Swift.Void)? = nil)
  @_Concurrency.MainActor @preconcurrency public func popController(completion: (() -> Swift.Void)? = nil)
  @_Concurrency.MainActor @preconcurrency public func dismissController(completion: (() -> Swift.Void)? = nil)
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public init(nibName nibNameOrNil: Swift.String?, bundle nibBundleOrNil: Foundation.Bundle?)
  @_Concurrency.MainActor @preconcurrency @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
@available(iOS 13.0, *)
public class MaskDetectionVideoHelper {
  public enum ResizeMode {
    case centerCrop
    case stretch
    public static func == (a: UdentifyFACE.MaskDetectionVideoHelper.ResizeMode, b: UdentifyFACE.MaskDetectionVideoHelper.ResizeMode) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
  public init(maskDetector: UdentifyFACE.MaskDetector, resizeMode: UdentifyFACE.MaskDetectionVideoHelper.ResizeMode = .centerCrop)
  public func detectInFrame(_ image: CoreVideo.CVPixelBuffer) throws -> [UdentifyFACE.MaskDetector.Result]
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @available(iOS 11.0, *)
@_Concurrency.MainActor @preconcurrency public class IDCameraController : UdentifyFACE.BaseController {
  @_Concurrency.MainActor @preconcurrency weak public var delegate: (any UdentifyFACE.IDCameraControllerDelegate)?
  @_Concurrency.MainActor @preconcurrency public var currentMode: UdentifyFACE.IDCameraController.ViewMode
  @_Concurrency.MainActor @preconcurrency public var userID: Swift.String?
  @_Concurrency.MainActor @preconcurrency public var listName: Swift.String?
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public var prefersStatusBarHidden: Swift.Bool {
    @objc get
  }
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public func viewDidLoad()
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public func viewWillAppear(_ animated: Swift.Bool)
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public func viewDidAppear(_ animated: Swift.Bool)
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public func viewWillDisappear(_ animated: Swift.Bool)
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public func viewDidDisappear(_ animated: Swift.Bool)
  @objc deinit
  @_Concurrency.MainActor @preconcurrency public static func instantiate(serverURL: Swift.String, method: UdentifyFACE.MethodType, transactionID: Swift.String, userID: Swift.String? = nil, listName: Swift.String? = nil, logLevel: UdentifyCommons.LogLevel = .warning, completionHandler: @escaping (UdentifyFACE.IDCameraController?, UdentifyFACE.FaceError?) -> Swift.Void)
  @_Concurrency.MainActor @preconcurrency override public func dismissOrPopViewController(completion: (() -> Swift.Void)? = nil)
  @_Concurrency.MainActor @preconcurrency override public func popController(completion: (() -> Swift.Void)? = nil)
  @_Concurrency.MainActor @preconcurrency override public func dismissController(completion: (() -> Swift.Void)? = nil)
  @_Concurrency.MainActor @preconcurrency public func checkLiveness(forImage image: UIKit.UIImage, completionHandler: @escaping (UdentifyFACE.IDCameraController.ViewMode, UdentifyFACE.LivenessResult) -> Swift.Void)
  @_Concurrency.MainActor @preconcurrency public func register(forImage image: UIKit.UIImage, completionHandler: @escaping (UdentifyFACE.FaceIDResult) -> Swift.Void)
  @_Concurrency.MainActor @preconcurrency public func authenticate(forImage image: UIKit.UIImage, completionHandler: @escaping (UdentifyFACE.FaceIDResult) -> Swift.Void)
  @_Concurrency.MainActor @preconcurrency public func performFaceIDandLiveness(image: UIKit.UIImage, methodType: UdentifyFACE.MethodType? = nil, completionHandler: @escaping (UdentifyFACE.FaceIDResult?, UdentifyFACE.LivenessResult?) -> Swift.Void)
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public init(nibName nibNameOrNil: Swift.String?, bundle nibBundleOrNil: Foundation.Bundle?)
  @_Concurrency.MainActor @preconcurrency @objc required dynamic public init?(coder: Foundation.NSCoder)
}
@available(iOS 11.0, *)
extension UdentifyFACE.IDCameraController {
  public enum ViewMode {
    case capture
    case busy
    case send
    case result
    case resultSuccess
    case resultFailure
    case register
    case authentication
    case photoUpload
    public static func == (a: UdentifyFACE.IDCameraController.ViewMode, b: UdentifyFACE.IDCameraController.ViewMode) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
}
extension UdentifyFACE.IDCameraController {
  @_Concurrency.MainActor @preconcurrency public func stopCamera()
  @_Concurrency.MainActor @preconcurrency public func restartCamera()
  @_Concurrency.MainActor @preconcurrency public func pauseFrameProcessing()
  @_Concurrency.MainActor @preconcurrency public func resumeFrameProcessing()
}
extension UdentifyFACE.IDCameraController {
  @_Concurrency.MainActor @preconcurrency public static func addUserToList(serverUrl: Swift.String, transactionId: Swift.String, listName: Swift.String, metadata: [Swift.String : Any]?, completionHandler: @escaping (UdentifyFACE.ListResponseData?, UdentifyFACE.FaceError?) -> Swift.Void)
  @_Concurrency.MainActor @preconcurrency public static func searchUserInList(serverUrl: Swift.String, transactionId: Swift.String, listName: Swift.String, photo: UIKit.UIImage, completionHandler: @escaping (UdentifyFACE.ListUser?, UdentifyFACE.FaceError?) -> Swift.Void)
  @_Concurrency.MainActor @preconcurrency public static func deleteUserFromList(serverUrl: Swift.String, transactionId: Swift.String, listName: Swift.String, photo: UIKit.UIImage, completionHandler: @escaping (UdentifyFACE.ListUser?, UdentifyFACE.FaceError?) -> Swift.Void)
}
extension UdentifyFACE.IDCameraController : UdentifyCommons.FaceDetectionDelegate {
  @_Concurrency.MainActor @preconcurrency public func onError(originalImage: UIKit.UIImage, error: UdentifyCommons.FaceDetectionError)
  @_Concurrency.MainActor @preconcurrency public func onFaceDetected(originalImage: UIKit.UIImage, faceImage: UIKit.UIImage, rotation: Swift.Double)
}
extension UdentifyFACE.IDCameraController : UdentifyCommons.UdentifyCameraControllerDelegate {
  @_Concurrency.MainActor @preconcurrency public func onPhotoTaken(frame: CoreVideo.CVPixelBuffer?)
  @_Concurrency.MainActor @preconcurrency public func onPhotoTaken(photo: UIKit.UIImage?)
  @_Concurrency.MainActor @preconcurrency public func onFailure(error: any Swift.Error)
  @_Concurrency.MainActor @preconcurrency public func onCameraControllerStarted()
}
extension UdentifyFACE.IDCameraController : UdentifyCommons.UdentifyProgressBarDelegate {
  @_Concurrency.MainActor @preconcurrency public func progressFinished()
}
open class ActiveLivenessResult {
  open var error: UdentifyFACE.FaceError?
  open var transactionID: Swift.String?
  open var gestureResult: [Swift.String : Swift.Bool]?
  public init(error: UdentifyFACE.FaceError? = nil, transactionID: Swift.String? = nil, gestureResult: [Swift.String : Swift.Bool]? = nil)
  @objc deinit
}
@available(iOS 11.0, *)
public protocol ProgressBarDelegate : AnyObject {
  func progressFinished()
}
@available(iOS 11.0, *)
public protocol ActiveCameraControllerDelegate : AnyObject {
  func onResult(result: UdentifyFACE.FaceIDMessage)
  func onVideoTaken()
  func onFailure(error: any Swift.Error)
  func backButtonPressed()
  func willDismiss()
  func didDismiss()
}
public class UploadManager {
  public init(serverURL: Swift.String, transactionID: Swift.String)
  final public func uploadPhoto(image: UIKit.UIImage, completed: @escaping (UdentifyFACE.FaceError?) -> Swift.Void)
  @objc deinit
}
public enum MethodType {
  case registration
  case authentication
  case imageUpload
  case selfie
  case identification
  public static func == (a: UdentifyFACE.MethodType, b: UdentifyFACE.MethodType) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
@objc @_inheritsConvenienceInitializers @available(iOS 11.0, *)
@_Concurrency.MainActor @preconcurrency public class ActiveCameraController : UdentifyFACE.BaseController {
  @_Concurrency.MainActor @preconcurrency weak public var delegate: (any UdentifyFACE.ActiveCameraControllerDelegate)?
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public func viewDidLoad()
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public func viewWillAppear(_ animated: Swift.Bool)
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public func viewDidAppear(_ animated: Swift.Bool)
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public func viewWillDisappear(_ animated: Swift.Bool)
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public func viewDidDisappear(_ animated: Swift.Bool)
  @objc deinit
  @_Concurrency.MainActor @preconcurrency public static func instantiate(serverURL: Swift.String, method: UdentifyFACE.MethodType, transactionID: Swift.String, userID: Swift.String, hybridLivenessEnabled: Swift.Bool = false, autoNextEnabled: Swift.Bool = true, logLevel: UdentifyCommons.LogLevel = .warning, completionHandler: @escaping (UdentifyFACE.ActiveCameraController?, (any Swift.Error)?) -> Swift.Void)
  @_Concurrency.MainActor @preconcurrency override public func dismissOrPopViewController(completion: (() -> Swift.Void)? = nil)
  @_Concurrency.MainActor @preconcurrency override public func popController(completion: (() -> Swift.Void)? = nil)
  @_Concurrency.MainActor @preconcurrency override public func dismissController(completion: (() -> Swift.Void)? = nil)
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public init(nibName nibNameOrNil: Swift.String?, bundle nibBundleOrNil: Foundation.Bundle?)
  @_Concurrency.MainActor @preconcurrency @objc required dynamic public init?(coder: Foundation.NSCoder)
}
extension UdentifyFACE.ActiveCameraController : UdentifyCommons.FaceDetectionDelegate {
  @_Concurrency.MainActor @preconcurrency public func onError(originalImage: UIKit.UIImage, error: UdentifyCommons.FaceDetectionError)
  @_Concurrency.MainActor @preconcurrency public func onFaceDetected(originalImage: UIKit.UIImage, faceImage: UIKit.UIImage, rotation: Swift.Double)
}
extension UdentifyFACE.ActiveCameraController {
  @_Concurrency.MainActor @preconcurrency public func stopCamera()
  @_Concurrency.MainActor @preconcurrency public func restartCamera()
  @_Concurrency.MainActor @preconcurrency public func pauseFrameProcessing()
  @_Concurrency.MainActor @preconcurrency public func resumeFrameProcessing()
}
extension UdentifyFACE.ActiveCameraController : UdentifyCommons.UdentifyVideoControllerDelegate {
  @_Concurrency.MainActor @preconcurrency public func onCameraControllerStarted()
  @_Concurrency.MainActor @preconcurrency public func onVideoRecordStarted()
  @_Concurrency.MainActor @preconcurrency public func onAVCaptureMovieFileOutputAddedToSession()
  @_Concurrency.MainActor @preconcurrency public func onVideoRecordFinished(videoUrl: Foundation.URL)
  @_Concurrency.MainActor @preconcurrency public func onFailure(error: any Swift.Error)
}
extension UdentifyFACE.ActiveCameraController : UdentifyCommons.UdentifyCameraControllerDelegate {
  @_Concurrency.MainActor @preconcurrency public func onPhotoTaken(frame: CoreVideo.CVPixelBuffer?)
  @_Concurrency.MainActor @preconcurrency public func onPhotoTaken(photo: UIKit.UIImage?)
}
extension UdentifyFACE.ActiveCameraController : UdentifyCommons.UdentifyProgressBarDelegate {
  @_Concurrency.MainActor @preconcurrency public func progressFinished()
}
@_hasMissingDesignatedInitializers final public class ApiSettingsProvider {
  final public var currentSettings: any UdentifyFACE.ApiSettings
  public static func getInstance() -> UdentifyFACE.ApiSettingsProvider
  @objc deinit
}
public protocol ApiSettings {
  var colors: UdentifyFACE.ApiColors { get }
  var fonts: UdentifyFACE.ApiFonts { get }
  var configs: UdentifyFACE.ApiConfigs { get }
}
public struct ApiFonts {
  public init(titleFont: UIKit.UIFont = UIFont.boldSystemFont(ofSize: 24), buttonFont: UIKit.UIFont = UIFont.boldSystemFont(ofSize: 24), footerFont: UIKit.UIFont = UIFont.boldSystemFont(ofSize: 24))
}
public struct ApiColors {
  public let titleColor: UIKit.UIColor
  public let titleBG: UIKit.UIColor
  public let buttonErrorColor: UIKit.UIColor
  public let buttonSuccessColor: UIKit.UIColor
  public let buttonColor: UIKit.UIColor
  public let buttonTextColor: UIKit.UIColor
  public let buttonErrorTextColor: UIKit.UIColor
  public let buttonSuccessTextColor: UIKit.UIColor
  public let buttonBackColor: UIKit.UIColor
  public let footerTextColor: UIKit.UIColor
  public let checkmarkTintColor: UIKit.UIColor
  public let backgroundColor: UIKit.UIColor
  public init(titleColor: UIKit.UIColor = #colorLiteral(red: 1.0, green: 1.0, blue: 1.0, alpha: 1.0), titleBG: UIKit.UIColor = #colorLiteral(red: 1, green: 1, blue: 1, alpha: 0.476375214), errorColor: UIKit.UIColor = #colorLiteral(red: 1, green: 0.3019607843, blue: 0.1882352941, alpha: 1), successColor: UIKit.UIColor = #colorLiteral(red: 0.3019607843, green: 0.8509803922, blue: 0.3882352941, alpha: 1), buttonColor: UIKit.UIColor = #colorLiteral(red: 0.2234136164, green: 0.3436838984, blue: 0.8913004994, alpha: 1), buttonTextColor: UIKit.UIColor = #colorLiteral(red: 1.0, green: 1.0, blue: 1.0, alpha: 1.0), buttonErrorTextColor: UIKit.UIColor = #colorLiteral(red: 1.0, green: 1.0, blue: 1.0, alpha: 1.0), buttonSuccessTextColor: UIKit.UIColor = #colorLiteral(red: 1.0, green: 1.0, blue: 1.0, alpha: 1.0), buttonBackColor: UIKit.UIColor = #colorLiteral(red: 1.0, green: 1.0, blue: 1.0, alpha: 1.0), footerTextColor: UIKit.UIColor = #colorLiteral(red: 1.0, green: 1.0, blue: 1.0, alpha: 1.0), checkmarkTintColor: UIKit.UIColor = #colorLiteral(red: 1.0, green: 1.0, blue: 1.0, alpha: 1.0), backgroundColor: UIKit.UIColor = #colorLiteral(red: 0.5176470588, green: 0.3058823529, blue: 0.8901960784, alpha: 1))
}
public struct ApiConfigs {
  public let cameraPosition: AVFoundation.AVCaptureDevice.Position
  public let autoTake: Swift.Bool
  public let errorDelay: Swift.Double
  public let successDelay: Swift.Double
  public let bundle: Foundation.Bundle
  public let tableName: Swift.String?
  public let maskDetection: Swift.Bool
  public let maskConfidence: Swift.Float
  public let invertedAnimation: Swift.Bool
  public let backButtonEnabled: Swift.Bool
  public let buttonHeight: CoreFoundation.CGFloat
  public let buttonMarginLeft: CoreFoundation.CGFloat
  public let buttonMarginRight: CoreFoundation.CGFloat
  public let buttonCornerRadius: CoreFoundation.CGFloat
  public let multipleFacesRejected: Swift.Bool
  public let progressBarStyle: UdentifyCommons.UdentifyProgressBarStyle?
  public init(cameraPosition: AVFoundation.AVCaptureDevice.Position = .front, requestTimeout: Swift.Double = 15, autoTake: Swift.Bool = false, errorDelay: Swift.Double = 0.10, successDelay: Swift.Double = 0.75, bundle: Foundation.Bundle = .main, tableName: Swift.String? = nil, maskDetection: Swift.Bool = false, maskConfidence: Swift.Float = 0.95, invertedAnimation: Swift.Bool = false, backButtonEnabled: Swift.Bool = true, multipleFacesRejected: Swift.Bool = true, buttonHeight: CoreFoundation.CGFloat = 70, buttonMarginLeft: CoreFoundation.CGFloat = 20, buttonMarginRight: CoreFoundation.CGFloat = 20, buttonCornerRadius: CoreFoundation.CGFloat = 8, progressBarStyle: UdentifyCommons.UdentifyProgressBarStyle? = nil)
}
open class FaceIDMessage {
  open var isFailed: Swift.Bool
  open var faceIDResult: UdentifyFACE.FaceIDResult?
  open var livenessResult: UdentifyFACE.LivenessResult?
  open var activeLivenessResult: UdentifyFACE.ActiveLivenessResult?
  public init(isFailed: Swift.Bool = true, faceIDResult: UdentifyFACE.FaceIDResult? = nil, livenessResult: UdentifyFACE.LivenessResult? = nil, activeLivenessResult: UdentifyFACE.ActiveLivenessResult? = nil)
  @objc deinit
}
@available(iOS 11.0, *)
public protocol IDCameraControllerDelegate : AnyObject {
  func cameraController(image: UIKit.UIImage)
  func cameraController(didEncounterError error: UdentifyFACE.FaceError)
  func cameraControllerDidFinishWithResult(viewMode: UdentifyFACE.IDCameraController.ViewMode, result: UdentifyFACE.FaceIDMessage)
  func cameraControllerUserPressedBackButton()
  func cameraControllerWillDismiss()
  func cameraControllerDidDismiss()
}
public struct ListResponseData : Swift.Codable {
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct CustomerList : Swift.Codable {
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
open class LivenessResult {
  open var probability: Swift.Double?
  open var quality: Swift.Double?
  open var livenessScore: Swift.Double?
  open var error: UdentifyFACE.FaceError?
  open var transactionID: Swift.String?
  open var assessmentDescription: Swift.String?
  open var assessmentValue: Swift.Double?
  public init(probability: Swift.Double? = 0, quality: Swift.Double? = 0, livenessScore: Swift.Double? = 0, error: UdentifyFACE.FaceError? = nil, transactionID: Swift.String? = nil, assessmentDescription: Swift.String? = nil, assessmentValue: Swift.Double? = nil)
  public func assessment(probabilityThreshold: Swift.Double = 0.0, qualityThreshold: Swift.Double = 0.0) -> UdentifyFACE.Assessment
  @objc deinit
}
public enum Assessment {
  case livenessSuccess(Swift.Double)
  case livenessFailure(Swift.Double)
  case lowQuality
  case error(Swift.String)
  public var description: Swift.String {
    get
  }
}
public enum ViewMode {
  case capture
  case busy
  case send
  case result
  case resultSuccess
  case resultFailure
  public static func == (a: UdentifyFACE.ViewMode, b: UdentifyFACE.ViewMode) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
@available(iOS 13.0, *)
public class MaskDetector {
  public enum Status {
    case mask
    case noMask
    public static func == (a: UdentifyFACE.MaskDetector.Status, b: UdentifyFACE.MaskDetector.Status) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
  public struct Result {
    public let status: UdentifyFACE.MaskDetector.Status
    public let bound: CoreFoundation.CGRect
    public let confidence: Swift.Float
  }
  public static let InputImageSize: Swift.Int
  public init(minConfidence: Swift.Float = 0.8, maxResults: Swift.Int = 10, iouThreshold: Swift.Float = 0.2)
  public func detectMasks(cvPixelBuffer: CoreVideo.CVPixelBuffer, orientation: ImageIO.CGImagePropertyOrientation = .up) throws -> [UdentifyFACE.MaskDetector.Result]
  public func detectMasks(cgImage: CoreGraphics.CGImage, orientation: ImageIO.CGImagePropertyOrientation = .up) throws -> [UdentifyFACE.MaskDetector.Result]
  public func detectMasks(ciImage: CoreImage.CIImage, orientation: ImageIO.CGImagePropertyOrientation = .up) throws -> [UdentifyFACE.MaskDetector.Result]
  @objc deinit
}
public enum Status : Swift.Int {
  case Detected
  case Started
  case Success
  case Failed
  case OnProgress
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@available(iOS 13.0, *)
extension UdentifyFACE.MaskDetectionVideoHelper.ResizeMode : Swift.Equatable {}
@available(iOS 13.0, *)
extension UdentifyFACE.MaskDetectionVideoHelper.ResizeMode : Swift.Hashable {}
@available(iOS 11.0, *)
extension UdentifyFACE.IDCameraController.ViewMode : Swift.Equatable {}
@available(iOS 11.0, *)
extension UdentifyFACE.IDCameraController.ViewMode : Swift.Hashable {}
extension UdentifyFACE.MethodType : Swift.Equatable {}
extension UdentifyFACE.MethodType : Swift.Hashable {}
extension UdentifyFACE.ViewMode : Swift.Equatable {}
extension UdentifyFACE.ViewMode : Swift.Hashable {}
@available(iOS 13.0, *)
extension UdentifyFACE.MaskDetector.Status : Swift.Equatable {}
@available(iOS 13.0, *)
extension UdentifyFACE.MaskDetector.Status : Swift.Hashable {}
extension UdentifyFACE.Status : Swift.Equatable {}
extension UdentifyFACE.Status : Swift.Hashable {}
extension UdentifyFACE.Status : Swift.RawRepresentable {}
