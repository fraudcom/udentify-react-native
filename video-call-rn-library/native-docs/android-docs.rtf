# Udentify Video Call Android Integration

## Overview
This document explains how to integrate the Udentify Video Call SDK with React Native for Android applications.

## Prerequisites
- Android SDK API level 21 or higher
- React Native 0.68 or higher
- Kotlin support enabled
- Required permissions in AndroidManifest.xml

## Integration Steps

### 1. AAR Library Setup
The `vc-25.2.1.aar` file contains the Udentify Video Call SDK for Android. This file should be placed in the `android/libs/` directory of the video-call-rn-library.

**File Location:**
```
video-call-rn-library/
  android/
    libs/
      vc-25.2.1.aar  <- Video Call SDK AAR
```

### 2. Gradle Configuration
The build.gradle file is configured to automatically include AAR files from the libs directory:

```gradle
repositories {
  mavenCentral()
  google()
  
  // Add flatDir for AAR files
  flatDir {
    dirs 'libs'
  }
}

dependencies {
  // Udentify Core dependency (provides UdentifyCommons)
  api project(':udentify-core')
  
  // Add AAR files from libs directory
  implementation fileTree(dir: "libs", include: ["*.jar", "*.aar"])
  
  // Explicitly include the video call AAR
  implementation(name: 'vc-25.2.1', ext: 'aar')
}
```

### 3. Required Permissions
Add these permissions to your main app's AndroidManifest.xml:

```xml
<uses-permission android:name="android.permission.CAMERA" />
<uses-permission android:name="android.permission.RECORD_AUDIO" />
<uses-permission android:name="android.permission.INTERNET" />
<uses-permission android:name="android.permission.READ_PHONE_STATE" />
<uses-permission android:name="android.permission.ACCESS_NETWORK_STATE" />
<uses-permission android:name="android.permission.MODIFY_AUDIO_SETTINGS" />
```

### 4. SDK Classes and Interfaces
The Udentify Video Call SDK provides the following key classes:

#### Main Classes:
- `io.udentify.android.vc.fragment.VCFragment` - Main video call fragment
- `io.udentify.android.vc.model.VideoCallCredentials` - Credentials model
- `io.udentify.android.vc.listener.VideoCallOperator` - Operator interface

#### VideoCallCredentials Builder:
```kotlin
val credentials = VideoCallCredentials.Builder()
    .serverURL("your_server_url")
    .wssURL("your_websocket_url")
    .userID("user_id")
    .transactionID("transaction_id")
    .clientName("client_name")
    .idleTimeout(30)
    .build()
```

### 5. Implementation Details

#### VideoCallOperator Interface
The SDK requires implementing the VideoCallOperator interface:

```kotlin
interface VideoCallOperator {
    fun onCallStarted()
    fun onCallEnded()
    fun didChangeUserState(userState: Any)
    fun didChangeParticipantState(participantState: Any)
    fun didFailWithError(error: String)
    fun getCredentials(): VideoCallCredentials
}
```

#### Fragment Integration
```kotlin
// Create video call fragment
val operatorImpl = YourVideoCallOperatorImpl()
val fragment = VCFragment.newInstance(operatorImpl)

// Add to activity
activity.supportFragmentManager.beginTransaction()
    .replace(android.R.id.content, fragment)
    .addToBackStack("video_call")
    .commit()
```

### 6. Configuration Options
The SDK supports various configuration options:

#### UI Customization:
- Background color
- Text color
- PiP view border color
- Notification labels (default, countdown, token fetch)

#### Control Methods:
- `toggleCamera()` - Enable/disable camera
- `switchCamera()` - Switch between front/back camera
- `toggleMicrophone()` - Enable/disable microphone

### 7. Event Handling
The SDK emits various events that can be handled in React Native:

- `VideoCall_onStatusChanged` - Call status changes
- `VideoCall_onUserStateChanged` - User state changes
- `VideoCall_onParticipantStateChanged` - Participant state changes
- `VideoCall_onError` - Error events

### 8. Error Handling
Common error types:
- `ERR_SDK_NOT_AVAILABLE` - SDK not properly integrated
- `ERR_MISSING_PARAMETERS` - Required parameters missing
- `ERR_PERMISSION_DENIED` - Required permissions not granted
- `ERR_UNKNOWN` - General SDK errors

### 9. Troubleshooting

#### Common Issues:
1. **ClassNotFoundException**: Ensure AAR file is in libs directory and properly referenced
2. **Permission Denied**: Check that all required permissions are granted
3. **Fragment Manager Issues**: Ensure using FragmentActivity context

#### Debug Logging:
Enable debug logging to troubleshoot issues:
```kotlin
android.util.Log.d("VideoCallModule", "Debug message")
```

### 10. Dependencies
Required dependencies are automatically handled by the gradle configuration:
- React Native bridge
- Kotlin standard library
- AndroidX Fragment library
- Udentify Core module

## Testing
Test the integration using the provided test app:
1. Build the video-call-rn-library
2. Run the test app with video call functionality
3. Verify permissions are requested correctly
4. Test video call initiation and termination

## Support
For additional support or issues, refer to the native SDK documentation or contact the Udentify support team.
